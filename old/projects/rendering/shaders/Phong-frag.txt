uniform float inflate;
uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 specular;
uniform sampler2D texture;
uniform vec3 lightDir;
uniform float shininess;

varying vec3 vNormal;
varying vec3 vPosition;
varying vec2 vUv;


void main() {
    // ----------- STUDENT CODE BEGIN ------------

  	// ambient = K_A * I_AL
  	// diffuse = K_D * I_L
  	// specular = K_S * I_L

  	vec3 a = ambient;
  	vec3 b = diffuse * dot(vNormal, lightDir);
  	
  	vec3 v = normalize(cameraPosition - vPosition);
  	vec3 r = lightDir - (dot(2.0 * lightDir, vNormal)/(length(vNormal) * length(vNormal))) * vNormal;
  	r = normalize(r);

  	float newShininess = shininess + .001;
  	vec3 c = specular * pow(dot(v, r), newShininess);

  	vec3 phong = a + b + c;
  	//modulate by texture
    gl_FragColor = texture2D(texture, vUv) * vec4( phong , 1.0 );
    // ----------- STUDENT CODE END ------------
}
